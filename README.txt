Тестовое задание (Python + FastApi + Postgres):



Модель базы данных
Пользователь – репрезентация пользователей в приложении. Должны быть обычные и админ пользователи
(админ назначается руками в базе или создаётся на старте приложения)
Товар – Состоит из заголовка, описания и цены
Счёт – Имеет идентификатор счёта и баланс. Привязан к пользователю. У пользователя может быть несколько счетов
Транзакция – история зачисления на счёт, хранит сумму зачисления и идентификатор счёта


Функциональные критерии
Весь описываемый ниже функционал должен быть осуществлён в формате REST API. Работа с шаблонами, HTML или фронтендом в любой форме не предусматривается.

Пользователь может:
1. Регистрация (по паролю и логину, возвращает ссылку активации)
2. Логин
3. Просмотр списка товаров
4. Покупка товара, просто списывает с баланса стоимость товара, при условии наличия на балансе счёта достаточного количества средств
5. Просмотр баланса всех счетов и историю транзакций (Добавить дату по транзакции!)
6. Зачисление средств на счёт, выполняется с помощью эндпоинта [POST] /payment/webhook симулирует начисление со стороннего сервиса.

Возможности админа:
1. Видеть все товары
2. Видеть всех пользователей и их счета
3. Включать/отключать пользователей
4. Создавать/редактировать/удалять товары




Не функциональные критерии
1. Логины пользователей уникальны
2. После регистрации пользователь создаётся в не активном состоянии. Становится активным переходя по ссылке полученной с регистрации
3. Авторизация должна быть сделана через JWT. Защищённые эндпоинты должны получать токен в заголовке Authorization в Bearer формате

